version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: ai-workflow-agent
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/workflow_agent
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - workflow-network
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Celery worker
  celery-worker:
    build: .
    container_name: ai-workflow-celery
    command: celery -A src.workers.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/workflow_agent
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - workflow-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Celery beat (scheduler)
  celery-beat:
    build: .
    container_name: ai-workflow-beat
    command: celery -A src.workers.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/workflow_agent
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - workflow-network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: ai-workflow-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=workflow_agent
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - workflow-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ai-workflow-redis
    command: redis-server --requirepass redis-password
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - workflow-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ai-workflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - workflow-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-workflow-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - workflow-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ai-workflow-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - workflow-network
    restart: unless-stopped

networks:
  workflow-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
